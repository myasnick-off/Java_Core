package ru.geekbrains.ads.Lesson_7;

/**
 * 1. Реализовать программу, в которой задается граф из 10 вершин.
 *    Задать ребра и найти кратчайший путь с помощью поиска в ширину.
 * */

public class MainClass {

    public static final int VERTEX_NUMBER = 10;

    public static void main(String[] args) {
        generateMetroGraph();
    }

    // метод для заполнения графа вершинами и связями (на примере станций Метро с временем пути между ними)
    // и для нахождения кратчайшего пути между двумя вершинами проходом в ширину
    public static void generateMetroGraph() {

        // инициализируем граф
        GraphImpl graph = new GraphImpl(VERTEX_NUMBER);

        // заполняем граф вершинами
        graph.addVertexAll("Курская", "Театральная",
                "Пушкинская", "Беговая", "Охотный ряд", "Арбатская",
                "Чеховская", "Киевская", "Баррикадная", "Таганская");

        // создаем связи с весами между вершинами
        graph.addEdge(3, "Курская", "Театральная","Таганская");
        graph.addEdge(4,"Курская","Охотный ряд");
        graph.addEdge(9,"Курская","Киевская");
        graph.addEdge(3,"Курская","Таганская");
        graph.addEdge(3,"Охотный ряд","Арбатская");
        graph.addEdge(3,"Арбатская","Чеховская");
        graph.addEdge(8,"Чеховская", "Беговая");
        graph.addEdge(3,"Театральная", "Пушкинская");
        graph.addEdge(7,"Пушкинская", "Беговая");
        graph.addEdge(3,"Киевская","Баррикадная");
        graph.addEdge(4,"Баррикадная", "Беговая");
        graph.addEdge(14,"Таганская", "Беговая");

        // выполняем проход в ширину между заданными вершинами
        graph.bfs("Курская", "Беговая");
        graph.showPaths();
    }
}
