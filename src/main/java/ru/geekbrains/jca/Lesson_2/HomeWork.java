package ru.geekbrains.jca.Lesson_2;

import java.util.Arrays;

public class HomeWork {

    public static void main (String[] args) {

        /* 1. Задать целочисленный массив, состоящий из элементов 0 и 1. С помощью цикла и условия
        заменить 0 на 1, 1 на 0 */
        int[] intArr = { 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1 };
        for (int i = 0; i < intArr.length; i++) {
            if (intArr[i] == 0) intArr[i] = 1;
            else intArr[i] = 0;
        }
        System.out.println(Arrays.toString(intArr));


        /* 2. Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями
        0 3 6 9 12 15 18 21 */
        int[] arr = new int[8];
        for (int i = 0; i < arr.length; i++)  arr[i] = i * 3;
        System.out.println(Arrays.toString(arr));


        /* 3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа
        меньшие 6 умножить на 2; */
        int[] randomArr = { 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 };
        for (int i = 0; i < randomArr.length; i++) {
            if (randomArr[i] < 6) randomArr[i] *= 2;
        }
        System.out.println(Arrays.toString(randomArr));


        /* 4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
        и с помощью цикла(-ов) заполнить его диагональные элементы единицами; */
        int[][] matrix = new int[5][5];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (i == j || i == matrix[i].length - 1 - j) matrix[i][j] = 1;
                System.out.print(matrix[i][j] + "  ");
            }
            System.out.println();
        }


        /* 5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы
        (без помощи интернета); */
        int[] someArr = { 12, -8, 0, 87, 6, -15, 11, 145, 50, -9, 44, 88, -93, -25 };
        int min = someArr[0];
        int max = someArr[0];
        for (int i : someArr) {
            if (i < min) min = i;
            if (i > max) max = i;
        }
        System.out.println("Минимальное число: " + min);
        System.out.println("Максимальное число: " + max);


        // пример применения метода из пункта 6.
        int[] arrForBalance = { 2, 2, 2, 1, 2, 2, 10, 1 };
        System.out.println(checkBalance(arrForBalance));

        // пример применения метода из пункта 7.
        int[] arrForShift = { 1, 2, 3, 4, 5 };
        System.out.println(Arrays.toString(arrayShifter(arrForShift, -2)));

    }

    /* 6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,
       метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части
       массива равны. Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true,
       checkBalance([1, 1, 1, || 2, 1]) → true, граница показана символами ||,
       эти символы в массив не входят. */
    private static boolean checkBalance(int[] array) {
        int leftHalf = array[0];    // переменная для хранения суммы левой половины массива (начальное значение равно первому элементу)
        int rightHalf = 0;          // переменная для хранения суммы правой половины массива
        // вычисляем сумму правой половины (все элементы кроме первого)
        for (int i = 1; i < array.length; i++) {
            rightHalf += array[i];
        }
        for (int i = 1; i < array.length; i++) {
            if (leftHalf == rightHalf) return true; // если половины равны, возвращаем true
            leftHalf += array[i];                   // перекидываем в левую сумму один элемент
            rightHalf -= array[i];                  // и вычитаем этот элемент из правой суммы
        }
        return false;
    }


    /* 7. **** Написать метод, которому на вход подается одномерный массив и число n
    (может быть положительным, или отрицательным), при этом метод должен сместить все элементы массива
    на n позиций. Элементы смещаются циклично. Для усложнения задачи нельзя пользоваться вспомогательными
    массивами. Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ];
    [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].
    При каком n в какую сторону сдвиг можете выбирать сами. */

    private static int[] arrayShifter(int[] arr, int n) {
        // если n положительное, то двигаем элементы массива вправо
        if (n > 0) {
            // в цикле производим сдвиг элементов по одному n раз
            for (int i = 1; i <= n; i++) {
                int x = arr[arr.length - 1];                                  //сохраняем последний элемент массива
                for (int j = arr.length - 1; j > 0; j--) arr[j] = arr[j - 1]; // двигаем остальные элементы на одну позицию вправо
                arr[0] = x;                                                   // помещаем последний элемент в начало массива
            }
        }
        // если n отрицательное, то двигаем элементы массива влево
        if (n < 0) {
            // в цикле производим сдвиг элементов по одному n раз
            for (int i = 1; i <= -n; i++) {
                int x = arr[0];                                               //сохраняем первый элемент массива
                for (int j = 0; j < arr.length - 1; j++) arr[j] = arr[j + 1]; // двигаем остальные элементы на одну позицию влево
                arr[arr.length - 1] = x;                                      // помещаем первый элемент в конец массива
            }
        }
        return arr;
    }
    /* реализация метода получилась довольно громоздкой, возможно есть варианты попроще,
    но это все что пришло на ум )) */

}
